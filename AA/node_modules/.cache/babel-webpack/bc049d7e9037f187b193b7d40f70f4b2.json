{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Angular/Angular-AHT/AA/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\n/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536;\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process');\n\n    const {\n      emitWarning\n    } = process;\n\n    try {\n      process.emitWarning = () => {};\n\n      Object.assign(globalThis, require('node:stream/web'));\n      process.emitWarning = emitWarning;\n    } catch (error) {\n      process.emitWarning = emitWarning;\n      throw error;\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'));\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const {\n    Blob\n  } = require('buffer');\n\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name(params) {\n      let position = 0;\n      const blob = this;\n      return new ReadableStream({\n        type: 'bytes',\n\n        pull(ctrl) {\n          return _asyncToGenerator(function* () {\n            const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE));\n            const buffer = yield chunk.arrayBuffer();\n            position += buffer.byteLength;\n            ctrl.enqueue(new Uint8Array(buffer));\n\n            if (position === blob.size) {\n              ctrl.close();\n            }\n          })();\n        }\n\n      });\n    };\n  }\n} catch (error) {}\n/* c8 ignore end */","map":{"version":3,"sources":["C:/Angular/Angular-AHT/AA/node_modules/fetch-blob/streams.cjs"],"names":["POOL_SIZE","globalThis","ReadableStream","process","require","emitWarning","Object","assign","error","Blob","prototype","stream","name","params","position","blob","type","pull","ctrl","chunk","slice","Math","min","size","buffer","arrayBuffer","byteLength","enqueue","Uint8Array","close"],"mappings":";;AAAA;AACA;AACA,MAAMA,SAAS,GAAG,KAAlB;;AAEA,IAAI,CAACC,UAAU,CAACC,cAAhB,EAAgC;AAC9B;AACA;AACA;AACA,MAAI;AACF,UAAMC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBF,OAAxB;;AACA,QAAI;AACFA,MAAAA,OAAO,CAACE,WAAR,GAAsB,MAAM,CAAE,CAA9B;;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAcN,UAAd,EAA0BG,OAAO,CAAC,iBAAD,CAAjC;AACAD,MAAAA,OAAO,CAACE,WAAR,GAAsBA,WAAtB;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACE,WAAR,GAAsBA,WAAtB;AACA,YAAMG,KAAN;AACD;AACF,GAXD,CAWE,OAAOA,KAAP,EAAc;AACd;AACAF,IAAAA,MAAM,CAACC,MAAP,CAAcN,UAAd,EAA0BG,OAAO,CAAC,8CAAD,CAAjC;AACD;AACF;;AAED,IAAI;AACF;AACA;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAWL,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAIK,IAAI,IAAI,CAACA,IAAI,CAACC,SAAL,CAAeC,MAA5B,EAAoC;AAClCF,IAAAA,IAAI,CAACC,SAAL,CAAeC,MAAf,GAAwB,SAASC,IAAT,CAAeC,MAAf,EAAuB;AAC7C,UAAIC,QAAQ,GAAG,CAAf;AACA,YAAMC,IAAI,GAAG,IAAb;AAEA,aAAO,IAAIb,cAAJ,CAAmB;AACxBc,QAAAA,IAAI,EAAE,OADkB;;AAElBC,QAAAA,IAAN,CAAYC,IAAZ,EAAkB;AAAA;AAChB,kBAAMC,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAWN,QAAX,EAAqBO,IAAI,CAACC,GAAL,CAASP,IAAI,CAACQ,IAAd,EAAoBT,QAAQ,GAAGd,SAA/B,CAArB,CAAd;AACA,kBAAMwB,MAAM,SAASL,KAAK,CAACM,WAAN,EAArB;AACAX,YAAAA,QAAQ,IAAIU,MAAM,CAACE,UAAnB;AACAR,YAAAA,IAAI,CAACS,OAAL,CAAa,IAAIC,UAAJ,CAAeJ,MAAf,CAAb;;AAEA,gBAAIV,QAAQ,KAAKC,IAAI,CAACQ,IAAtB,EAA4B;AAC1BL,cAAAA,IAAI,CAACW,KAAL;AACD;AARe;AASjB;;AAXuB,OAAnB,CAAP;AAaD,KAjBD;AAkBD;AACF,CAxBD,CAwBE,OAAOrB,KAAP,EAAc,CAAE;AAClB","sourcesContent":["/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process')\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, require('node:stream/web'))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer')\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n"]},"metadata":{},"sourceType":"script"}